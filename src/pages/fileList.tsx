import Head from "next/head";
import Container from "react-bootstrap/Container";
import Footer from "@/components/Footer";
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import { useEffect, useState } from 'react';

import PageHelper from '@/components/PageHelper';
import AdminNav from "@/components/AdminNav";

// import DateTimeField from "@1stquad/react-bootstrap-datetimepicker"

// ref: https://github.com/wojtekmaj/react-datetime-picker
// import DateTimePicker from "react-datetime-picker"; // Error: Hydration failed because the initial UI does not match what was rendered on the server.
// type DateTimeValuePiece = Date | null;
// type DateTimeValue = DateTimeValuePiece | [DateTimeValuePiece, DateTimeValuePiece]; 
// import 'react-datetime-picker/dist/DateTimePicker.css';
// import 'react-calendar/dist/Calendar.css';
// import 'react-clock/dist/Clock.css';

// ref: https://github.com/arqex/react-datetime
import Datetime from 'react-datetime';
import Moment from 'moment';
import "react-datetime/css/react-datetime.css";


export default function FileList() {

  const [page, setPage] = useState(1); // for pagination
  const [total, setTotal] = useState(0);
  const perPage = 10;
  const pageCount = Math.ceil(total/perPage)?Math.ceil(total/perPage):1;
  const [fileListData, setFileListData] = useState(null);
  const [fileName, setFileName] = useState('');
  // const [nodeStatus, setNodeStatus] = useState(-1);
  const [fileHash, setFileHash] = useState('');
  const [loginInfo, setLoginInfo] = useState(null);

  const now = new Date();
  // const [createStart, setCreatedStart] = useState<DateTimeValue>(new Date(now.getTime() - 7*24*60*60*1000));
  // const [createEnd, setCreatedEnd] = useState<DateTimeValue>(now);

  const [createStart, setCreatedStart] = useState<string|Moment.Moment>('');
  const [createEnd, setCreatedEnd] = useState<string|Moment.Moment>('');

  useEffect(() => {
    fetchFileList(page, perPage);
  }, []);

  const fetchFileList = async (page: number, perPage: number) => {
    const url = `http://127.0.0.1:10010/admapi/fileindex/list`;
    const postData = {
      'name': fileName,
      'hash': fileHash,
      'createdStart': createStart ? Moment(createStart).format('YYYY-MM-DD HH:mm:00'): '',
      'createdEnd': createEnd ? Moment(createEnd).format('YYYY-MM-DD HH:mm:59'): '',
      'page': page,
      'pagesize': perPage,
    };
    fetch(url, {
      method: 'POST',
      credentials: 'include',
      mode: 'cors',
      headers: {
        'API-Token':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJncGEiOiIxLjAuMTcwNDUwMzEwMCJ9.bUXrqlMau9-bWPjYZiiTsBttca8cPWX4seAhC5Ac69A',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(postData),
      })
      .then(res => res.json())
      .then(data => {
        if (data && data.LoginInfo) {
          setLoginInfo(data.LoginInfo);
        }
        setFileListData(data);
      })
      .catch(error => console.log(error));
  }

  const fetchEnableFile = async (fileId: string, actionIsEnable: boolean) => {
    const url = `http://127.0.0.1:10010/admapi/fileindex/enable/${fileId}/${actionIsEnable?'1':'9'}`;
    const postData = {
    };
    fetch(url, {
      method: 'POST',
      credentials: 'include',
      mode: 'cors',
      headers: {
        'API-Token':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJncGEiOiIxLjAuMTcwNDUwMzEwMCJ9.bUXrqlMau9-bWPjYZiiTsBttca8cPWX4seAhC5Ac69A',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(postData),
      })
      .then(res => res.json())
      .then(data => {
        if (data && data.LoginInfo) {
          setLoginInfo(data.LoginInfo);
        }
        console.log('the result of enable file:', data);
      })
      .catch(error => console.log(error));
  }

  const [showEdit, setShowEdit] = useState(false);

  const handleCloseEdit = () => setShowEdit(false);
  const handleShowEdit = () => setShowEdit(true);

  const [detailFocusId, setDetailFocusId] = useState('');


  const [showDetail, setShowDetail] = useState(false);

  const [fileItemInDetail, setFileItemInDetail] = useState({});
  const handleCloseDetail = () => setShowDetail(false);
  const handleShowDetail = (fileItem: object) => {
    setFileItemInDetail(fileItem);
    setShowDetail(true);
  };

  const [showSwitchStatus, setShowSwitchStatus] = useState(false);
  const handleCloseSwitchStatus = () => setShowSwitchStatus(false);
  const handleShowSwitchStatus = () => setShowSwitchStatus(true);

  const handleSearch = () => {
    fetchFileList(page, perPage);
  };

  return (
    <>
      <Head>
        <title>File List - Flexdrive Admin System</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <AdminNav loginInfo={loginInfo}/>

      <Container as="main" className="py-0 px-3 mx-auto">
        <Container fluid className="px-0 py-3">
          <nav aria-label="breadcrumb" className="bg-light bg-gradient">
            <ol className="breadcrumb">
              <li className="breadcrumb-item"><a href="/">Home</a></li>
              <li className="breadcrumb-item"><a href="/fileList">File</a></li>
              <li className="breadcrumb-item active" aria-current="page">List</li>
            </ol>
          </nav>
        </Container>

        {/* search box here         */}
        <Container fluid className="px-4 py-2">
          <div className="row">
            <div className="col-sm-2">
              <label htmlFor="inputFileName" className="form-label">File Name</label>
            </div>
            <div className="col-sm-3">
              <input type="text" className="form-control" name="fileName" id="inputFileName" value={fileName} onChange={(event: any)=>{setFileName(event.target.value)}}/>
            </div>
            <div className="col-sm-2">
              <label htmlFor="inputFileHash" className="form-label">File Hash</label>
            </div>
            <div className="col-sm-3">
              <input type="text" className="form-control" name="fileHash" id="inputFileHash" value={fileHash} onChange={(event: any)=>{setFileHash(event.target.value)}} placeholder="e.g.: 68e162ab42bfdd117bd11ff30dcbb14e"/>
            </div>
          </div>
          <div className="row">
            <div className="col-sm-2">
              <label htmlFor="inputCreatedStart" className="form-label">Created</label>
            </div>
            <div className="col-sm-3">
              <Datetime onChange={setCreatedStart} dateFormat="DD/MM/YYYY" timeFormat="HH:mm" initialValue={new Date(now.getTime() - 30*24*60*60*1000)} />
            </div>
            <div className="col-sm-2">to
            </div>
            <div className="col-sm-3">
              <Datetime onChange={setCreatedEnd} dateFormat="DD/MM/YYYY" timeFormat="HH:mm" initialValue={now} />
            </div>
            <div className="col-sm-1 ms-auto">
              <button type="button" className="btn btn-primary" id="btnSearch" onClick={handleSearch}>Search</button>
            </div>
          </div>
        </Container>

        <table className="table table-striped table-bordered table-hover">
          <thead>
            <tr className="table-primary">
              <th>Id</th>
              <th>File Name</th>
              <th>Ref Count</th>
              <th>Created</th>
              <th>Size</th>
              <th>Status</th>
              <th>Operation</th>
            </tr>
          </thead>
          <tbody>
            {fileListData ? (fileListData.result.list.length>0 ? fileListData.result.list.map((item) => (
              //查到数据
              <tr key={item.Id}>
                <td>{item.Id}</td>
                <td>{item.FileName}</td>
                <td>{item.ReferCount}</td>
                <td>{item.Created}</td>
                <td>{item.Size}</td>
                <td>
                  {item.Status == 1 ? <span className="text-success">Normal</span>:<span className="text-warning">Invalid</span>}
                </td>
                <td>
                  <button className="btn btn-info btn-sm" onClick={handleShowSwitchStatus}>Switch</button>{' '}
                  <Button variant="info" size="sm" value={item.Id} onClick={(event)=>{handleShowDetail(item)}}>Detail</Button>{' '}
                  <Button variant="info" size="sm" target="_blank" href={'http://127.0.0.1:10011'+item.OuterPath}>Download</Button>{' '}
                </td>
              </tr>
            )):(
              //没有数据
              <tr><td colSpan={12}>Empty sets.</td></tr>
            )):(
              <tr><td colSpan={12}>Empty sets.</td></tr>
            )}
          </tbody>
        </table>

        {/* <span className="badge text-bg-secondary"></span> */}
        <Container fluid>
          <Row>
            <Col className="d-flex justify-content-start">
              <ul className="pagination">
                <li className="page-item disabled">
                  {fileListData && fileListData.result && fileListData.result.list.length > 0 ?
                    <a className="page-link" tabIndex={-1} aria-disabled="true">Found Results: {fileListData.result.total}</a>
                    :
                    <a className="page-link" tabIndex={-1} aria-disabled="true">No results found.</a>
                  }
                </li>
              </ul>
              {/* <Pagination>
                <Pagination.Item disabled>Found Results: 410</Pagination.Item>
              </Pagination> */}
            </Col>

            <Col className="d-flex justify-content-end">
              {fileListData && fileListData.result && fileListData.result.list.length > 0 ?
              <PageHelper allPage={Math.ceil(fileListData.result.total/fileListData.result.pagesize)} currentPage={fileListData.result.page} handleSearch={(page: number)=>{
                fetchFileList(page, perPage);
              }} loading={false} />
              : null}

            </Col>
          </Row>
        </Container>

        <Footer />
      </Container>

      <Modal show={showSwitchStatus} onHide={handleCloseSwitchStatus} key="md-switch-status">
        <Modal.Header closeButton>
          <Modal.Title>Switch File Status:</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="row">
            <div className="col-sm-3">File Id:</div>
            <div className="col-sm-9">{fileItemInDetail.Id}</div>
          </div>
          <div className="row">
            <div className="col-sm-3">File Name:</div>
            <div className="col-sm-9">{fileItemInDetail.FileName}</div>
          </div>
          <div className="row">
            <div className="col-sm-3">File Status:</div>
            <div className="col-sm-9">{fileItemInDetail.Status=='1'?'Normal':'Invalid'}</div>
          </div>
          <div className="row">
            <div className="col-sm-12">Would you like to <span className="text text-warning">{fileItemInDetail.Status=='1'?'Disable':'Enable'}</span> it?</div>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseSwitchStatus}>
            Cancel
          </Button>
          <Button variant="primary" onClick={()=>{
            fetchEnableFile(fileItemInDetail.Id, fileItemInDetail.Status!='1');
            handleCloseSwitchStatus();
            }}>
            Yes
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showEdit} onHide={handleCloseEdit} key="md-edit">
        <Modal.Header closeButton>
          <Modal.Title>Edit</Modal.Title>
        </Modal.Header>
        <Modal.Body>No Body</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseEdit}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleCloseEdit}>
            Apply
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showDetail} onHide={handleCloseDetail} key="md-detail">
        <Modal.Header closeButton>
          <Modal.Title>Detail of file {detailFocusId}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="row">
            <div className="col-sm-3">File Name</div>
            <div className="col-sm-9">{fileItemInDetail.FileName}</div>
          </div>
          <div className="row">
            <div className="col-sm-3">Cluster</div>
            <div className="col-sm-9">{fileItemInDetail.NodeId+','+fileItemInDetail.NodeId2+','+fileItemInDetail.NodeId3}</div>
          </div>
        </Modal.Body>
        <Modal.Footer>
          {/* <Button variant="secondary" onClick={handleCloseUpdate}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleCloseUpdate}>
            Apply
          </Button> */}
        </Modal.Footer>
      </Modal>
      <div className="row">
        <div className="col-sm-3">{createStart.valueOf()}</div>
        <div className="col-sm-3">{createEnd.toString()}</div>
      </div>
    </>
  );
}
