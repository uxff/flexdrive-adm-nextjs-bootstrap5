import Head from "next/head";
import Container from "react-bootstrap/Container";
import AppGuides from "@/components/AppGuides";
import Footer from "@/components/Footer";
import AdminHeader from "@/components/AdminHeader";
import ExampleComponents from "@/components/ExampleComponents";
import Breadcrumb from 'react-bootstrap/Breadcrumb';
import Table from 'react-bootstrap/Table';
import Pagination from 'react-bootstrap/Pagination';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import Nav from 'react-bootstrap/Nav';
import Navbar from 'react-bootstrap/Navbar';
// import {
//   QueryClient,
//   QueryClientProvider,
// } from 'react-query';
// import { useQuery } from 'react-query';
import { useEffect, useState } from 'react';
import { error } from "console";

import PageHelper from '@/components/PageHelper';
import AdminNav from "@/components/AdminNav";

// const queryClient = new QueryClient();

export default function LocalFs() {

  const [page, setPage] = useState(1); // for agination
  const [total, setTotal] = useState(0);
  const perPage = 5;
  const [dirpath, setDirpath] = useState('.');
  const pageCount = Math.ceil(total/perPage)?Math.ceil(total/perPage):1;
  const [localFsData, setLocalFsData] = useState(null);

  useEffect(() => {
    fetchLocalFs(page);
  }, []);

  const fetchLocalFs = (page: number) => {
    const url = `http://127.0.0.1:10010/admapi/local/${dirpath}?page=${page}&pagesize=${perPage}`;
    console.log('will fetch: '+url);
    fetch(url, {
      credentials: 'include',
      mode: 'cors',
      headers: {
        'API-Token':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJncGEiOiIxLjAuMTcwNDUwMzEwMCJ9.bUXrqlMau9-bWPjYZiiTsBttca8cPWX4seAhC5Ac69A',
      }})
      .then(res => res.json())
      .then(data => setLocalFsData(data))
      .catch(error => console.log(error));
  }

  const [showEdit, setShowEdit] = useState(false);

  const handleCloseEdit = () => setShowEdit(false);
  const handleShowEdit = () => setShowEdit(true);


  const [showUpdate, setShowUpdate] = useState(false);

  const handleCloseUpdate = () => setShowUpdate(false);
  const handleShowUpdate = () => setShowUpdate(true);

  return (
    <>
      <Head>
        <title>Bootstrap w/ React</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"/>
      </Head>
      <AdminNav />
      {/* <AdminHeader /> */}
      <Container as="main" className="py-0 px-3 mx-auto">

        <Container fluid className="px-0 py-0">
        <nav aria-label="breadcrumb">
          <ol className="breadcrumb">
            <li className="breadcrumb-item"><a href="#">Home</a></li>
            <li className="breadcrumb-item"><a href="#">Library</a></li>
            <li className="breadcrumb-item active" aria-current="page">Data</li>
          </ol>
        </nav>
        </Container>

        <Container fluid className="px-4 py-3">
            <div className="row">
              <div className="col">
                <label htmlFor="inputDirPath" className="form-label">Dir Path: </label>
                <input type="text" className="form-control" id="inputDirPath" aria-describedby="nodeNameHelp" value={dirpath} onChange={(event)=>{setDirpath(event.target.value)}}/>
              </div>
              <div className="col align-middle">
                <label className="form-label">&nbsp;</label><br/>
                <button type="button" className="btn btn-primary" id="btnSearch" onClick={()=>{fetchLocalFs(1)}}>Search</button>
              </div>
            </div>
        </Container>

        <div className="container-fluid ">
        <table className="table table-striped table-bordered table-hover">
          <thead>
            <tr>
              <th>Dir Path</th>
              <th>File Name</th>
              <th>Size</th>
              <th>Operation</th>
            </tr>
          </thead>
          <tbody>
            {localFsData ? (localFsData.result ? localFsData.result.list.map((item) => (
              //查到数据
              <tr>
                <td>{item.is_dir ? 
                <>
                  {/* <a href={"/localfs?dirpath="+item.dirpath}>{item.dirpath}/</a> */}
                  <a onClick={()=>{setDirpath(item.dirpath)}}>{item.dirpath}/</a>
                </> :item.name}</td>
                <td>{item.name}</td>
                <td>{item.size}</td>
                <td>
                  <Button variant="info" size="sm" onClick={handleShowEdit}>Edit</Button>{' '}
                  <Button variant="info" size="sm" onClick={handleShowUpdate}>Update</Button>{' '}
                </td>
              </tr>
            )):(
              //没有数据
              <tr><td colSpan={12}>No data found.</td></tr>
            )):(
              <tr><td>No data found.</td></tr>
            )}
          </tbody>
        </table>
        </div>

        {/* <span className="badge text-bg-secondary"></span> */}
        <Container fluid>
          <Row>
            <Col className="d-flex justify-content-start">
            <ul className="pagination">
              <li className="page-item disabled">
                {localFsData && localFsData.result && localFsData.result.list.length > 0 ?
                  <a className="page-link" tabIndex={-1} aria-disabled="true">Found Results: {localFsData.result.total}</a>
                  :
                  <a className="page-link" tabIndex={-1} aria-disabled="true">No results found.</a>
                }
              </li>
              </ul>
              {/* <Pagination>
                <Pagination.Item disabled>Found Results: 410</Pagination.Item>
              </Pagination> */}
            </Col>

            <Col className="d-flex justify-content-end">
              {localFsData && localFsData.result && localFsData.result.list.length > 0 ? 
                
                <PageHelper allPage={Math.ceil(localFsData.result.total/localFsData.result.pagesize)} currentPage={localFsData.result.page} handleSearch={(page: number)=>{
                  // setPage(page); // will cause infinite loop
                  fetchLocalFs(page);
                }} loading={false} />
              : <span>
                  No more pages.
                </span>}

            </Col>
          </Row>
        </Container>


        <Footer />
      </Container>

      <Modal show={showEdit} onHide={handleCloseEdit} key="md-edit">
        <Modal.Header closeButton>
          <Modal.Title>Edit Node</Modal.Title>
        </Modal.Header>
        <Modal.Body>Woohoo, you are reading this text in a modal!</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseEdit}>
            Close
          </Button>
          <Button variant="primary" onClick={handleCloseEdit}>
            Save Changes
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showUpdate} onHide={handleCloseUpdate} key="md-update">
        <Modal.Header closeButton>
          <Modal.Title>Update Node</Modal.Title>
        </Modal.Header>
        <Modal.Body>Woohoo, you are reading this text in a modal!</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseUpdate}>
            Close
          </Button>
          <Button variant="primary" onClick={handleCloseUpdate}>
            Save Changes
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
}
